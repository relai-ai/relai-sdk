name: Check Version Bump

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  check-version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          # We need the full commit history to compare
          fetch-depth: 0

      - name: Get base version (from default branch)
        env:
          BASE_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          # Fetch the latest commits from the default branch
          git fetch origin "${BASE_BRANCH}" --depth=1
          # Extract the version from pyproject.toml in the default branch
          BASE_VERSION=$(git show "origin/${BASE_BRANCH}:pyproject.toml" | grep '^version *= *"[^"]*' | sed 's/^version *= *"\([^"]*\)"/\1/')
          echo "BASE_VERSION=$BASE_VERSION" >> $GITHUB_ENV

      - name: Get head version (from tag commit)
        run: |
          # Extract the version from the current pyproject.toml at the tag
          HEAD_VERSION=$(grep '^version *= *"[^"]*' pyproject.toml | sed 's/^version *= *"\([^"]*\)"/\1/')
          echo "HEAD_VERSION=$HEAD_VERSION" >> $GITHUB_ENV

      - name: Get latest version (from triggering tag)
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          LATEST_TAG=${GITHUB_REF_NAME#v}
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV


      - name: Compare versions
        run: |
          echo "Base version is: $BASE_VERSION"
          echo "PR version is: $HEAD_VERSION"
          echo "Latest version is: $LATEST_TAG"

          if [ "$BASE_VERSION" = "$HEAD_VERSION" ]; then
            echo "❌ The version in pyproject.toml has not been bumped!"
            exit 1
          elif [ "$HEAD_VERSION" != "$LATEST_TAG" ]; then
            echo "❌ The version in pyproject.toml does not match the latest tag!"
            exit 1
          else
            echo "✅ The version has been bumped!"
          fi
        env:
          BASE_VERSION: ${{ env.BASE_VERSION }}
          HEAD_VERSION: ${{ env.HEAD_VERSION }}
